package quiero{		import flash.events.*;	import flash.net.*;	import flash.display.Loader	import flash.media.Sound	public class Quiero	{		private static var _params:Array=["url"];		private static var _optionalParams:Array=["onComplete","data","contentType","headers","format","method","toVars","onProgress","onIOError","onSecurityError","sound","loader","file","fileFieldName","downloadFile","downloadName"];		private static var _requests:Array = new Array();		private static var _count:uint=0;		public static var formats:Class=URLLoaderDataFormat;		public static var methods:Class=URLRequestMethod;		public static function request(o:Object,load:Boolean=true,strict:Boolean=true):Requester		{			var _url:String=o.url;			var _data:Object=o.data;			var _type:String=o.contentType;			var _method:String=o.method;			var _onComplete:Function=o.onComplete;						for (var i:uint=0; i<_params.length; i++)			{				if (o[_params[i]]==null)				{					throw new Error("[Quiero] Expected property "+_params[i]+" on params object!");				}			}			if(strict)			{				for(var str:String in o)				{					if(_params.indexOf(str) == -1 && _optionalParams.indexOf(str) == -1) trace("[Quiero] Warning! Quiero doesn't accept a property called '"+str+"'. Did you mean something else?") 				}			}			if(o.data == null){				o.data = {}				o.method = "GET"			}			if (o.method!=null)			{				if (String(o.method).toUpperCase()=="POST")				{					o.method=URLRequestMethod.POST;				}				if (String(o.method).toUpperCase()=="GET")				{					o.method=URLRequestMethod.GET;				}			}			var req:Requester=new Requester(_count,_url,_method,_type,o.file,o.downloadFile,o.downloadName,o.loader,o.sound);			var listenTo:EventDispatcher			if(o.file != null){				listenTo = o.file			}else if(o.downloadFile != null)			{				listenTo = o.downloadFile			}else if(o.loader != null)			{				listenTo = o.loader			}else if(o.sound != null){				listenTo = o.sound			}else{				listenTo = req.loader			}			if (o.forceRefresh)			{				try				{					o.data["quiero_flash_token"]=Random.randomString();				}				catch (e:TypeError)				{					trace("[Quiero] You should turn off 'forceRefresh'. It doesn't work with the data you specified.");				} catch(e:ReferenceError){					var u:URLVariables = new URLVariables();					u.data["quiero_flash_ftoken"]=Random.randomString();					o.data = u				}			}			if (o.toVars==null)			{				o.toVars=true;			}			if (o.constructor==Object)			{				o.data=objToVars(o.data);			}			req.fileFieldName = (o.fileFieldName == null)?"Filedata":o.fileFieldName			req.data=o.data;			_requests.push(req);			if (o.method is String)			{				req.request.method=o.method;			} else			{				req.request.method=URLRequestMethod.POST;			}			if(listenTo is URLLoader){			if (o.format is String)			{				URLLoader(listenTo).dataFormat=o.format;			} else			{				URLLoader(listenTo).dataFormat=URLLoaderDataFormat.TEXT;			}			}			if(o.contentType is String)			{				req.request.contentType = String(o.contentType)			}			if (o.headers is Array)			{				req.request.requestHeaders=o.headers;			}			if (o.onProgress is Function)			{				listenTo.addEventListener(ProgressEvent.PROGRESS,o.onProgress as Function);			}			if (o.onIOError is Function)				{				listenTo.addEventListener(IOErrorEvent.IO_ERROR,o.onIOError as Function);			}			if (o.onSecurityError is Function)			{				listenTo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,o.onSecurityError as Function);			}			if (o.onComplete is Function)			{				req.addEventListener(Event.COMPLETE,_onComplete);			}			if (load)			{				req.load();			}			_requests.push(req);			_count++;			return req;		}		private static function objToVars(o:Object):URLVariables		{			if(o is URLVariables) return o as URLVariables			var u:URLVariables = new URLVariables();			for (var key:String in o)			{				u[key]=o[key];			}			return u;		}	}}class Random{	public static var allowed:String="abcdefghijklmnopqrstuvwxyz0123456789";	public static var last:String="";	public static function randomString(length:uint=10):String	{		do		{			var t:String="";			for (var i=0; i<length; i++)			{				t+=allowed.charAt(randomInt(0,allowed.length-1));			}		} while (t == last);		last=t;		return t;	}	public static function randomInt(min:int,max:int):int	{		return Math.round((Math.random()*max)+min);	}}import flash.events.*;import flash.net.*;import flash.display.*import flash.media.Soundimport quiero.*;class Requester extends EventDispatcher{	private var _busy:Boolean=true;	public var request:URLRequest;	public var flLoader:Loader	private var _loader:URLLoader;	public var vars:URLVariables;	public var file:FileReference	private var _id:uint;	private var listen:EventDispatcher	private var sound:Sound	public var fileFieldName:String	public var defaultFileName:String	public var fileUpload:Boolean = true	public function Requester(id:uint,url:String,method:String="GET",type:String="application/x-www-form-urlencoded",file:FileReference=null,downloadFile:FileReference=null,dfn:String=null,loader2:Loader=null,sound2:Sound=null)	{		if (method==null||method=="")		{			method="GET";		}		if (type==null||type=="")		{			type="application/x-www-form-urlencoded";		}		this._id=id;		fileUpload = downloadFile == null		defaultFileName = dfn		request=new URLRequest(url);		_loader = new URLLoader()		_loader.dataFormat=type;		request.method=method;		request.data=vars;				if(file != null){			this.file = file			listen=file		}else if(downloadFile != null)		{			this.file = downloadFile			listen = downloadFile		}else if(loader2 != null)		{			this.flLoader = loader2			listen = loader2		}else if(sound2 != null){			this.sound =sound2			listen =sound		}else{			listen = _loader		}	}		public function set data(o:Object):void	{		request.data = o	}			public function load():void	{		if(listen is Loader){			Loader(listen).contentLoaderInfo.addEventListener(Event.COMPLETE,update)		}else{			listen.addEventListener(Event.COMPLETE,update);		}		if(listen is URLLoader){			URLLoader(listen).load(request);		}else if(listen is FileReference){			if(fileUpload)			{				FileReference(listen).upload(request,fileFieldName)			}else{				FileReference(listen).download(request,defaultFileName)			}					}else if(listen is Sound){			Sound(listen).load(request)			Sound(listen).play()		}else if(listen is Loader){			Loader(listen).load(request)		}	}	private function update(e:Event):void	{		dispatchEvent(new RequestEvent(Event.COMPLETE,_loader.data));	}	public function get loader():URLLoader	{		return _loader;	}	}